const char __shader_fs[] = 
"\n"
"uniform frag\n"
"{\n"
"    mat3 scissorMat;\n"
"    mat3 paintMat;\n"
"    vec4 innerCol;\n"
"    vec4 outerCol;\n"
"    vec2 scissorExt;\n"
"    vec2 scissorScale;\n"
"    vec2 extent;\n"
"    float radius;\n"
"    float feather;\n"
"    float strokeMult;\n"
"    float strokeThr;\n"
"    int texType;\n"
"    int type;\n"
"};\n"
"\n"
"\n"
"uniform sampler2D tex_smp;\n"
"\n"
"in vec2 fpos;\n"
"in vec2 ftcoord;\n"
"layout(location = 0) out vec4 outColor;\n"
"\n"
"float scissorMask(vec2 p)\n"
"{\n"
"    vec2 _82 = (-(abs((scissorMat * vec3(p, 1.0)).xy) - scissorExt)) * scissorScale + vec2(0.5);\n"
"    return clamp(_82.x, 0.0, 1.0) * clamp(_82.y, 0.0, 1.0);\n"
"}\n"
"\n"
"float sdroundrect(vec2 pt, vec2 ext, float rad)\n"
"{\n"
"    vec2 _30 = abs(pt) - (ext - vec2(rad, rad));\n"
"    return (min(max(_30.x, _30.y), 0.0) + length(max(_30, vec2(0.0)))) - rad;\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    vec2 param = fpos;\n"
"    float _98 = scissorMask(param);\n"
"    if (_98 == 0.0)\n"
"    {\n"
"        return;\n"
"    }\n"
"    vec4 result;\n"
"    if (type == 0)\n"
"    {\n"
"        vec2 param_1 = (paintMat * vec3(fpos, 1.0)).xy;\n"
"        vec2 param_2 = extent;\n"
"        float param_3 = radius;\n"
"        result = mix(innerCol, outerCol, vec4(clamp((feather * 0.5 + sdroundrect(param_1, param_2, param_3)) / feather, 0.0, 1.0))) * _98;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (type == 1)\n"
"        {\n"
"            vec4 color = texture(tex_smp, (paintMat * vec3(fpos, 1.0)).xy / extent);\n"
"            if (texType == 1)\n"
"            {\n"
"                color = vec4(color.xyz * color.w, color.w);\n"
"            }\n"
"            if (texType == 2)\n"
"            {\n"
"                color = vec4(color.x);\n"
"            }\n"
"            bool _222 = texType == 3;\n"
"            bool _228;\n"
"            if (_222)\n"
"            {\n"
"                _228 = color.w == 0.0;\n"
"            }\n"
"            else\n"
"            {\n"
"                _228 = _222;\n"
"            }\n"
"            if (_228)\n"
"            {\n"
"                discard;\n"
"            }\n"
"            vec4 _234 = color;\n"
"            vec4 _240 = (_234 * innerCol) * _98;\n"
"            color = _240;\n"
"            result = _240;\n"
"        }\n"
"        else\n"
"        {\n"
"            if (type == 2)\n"
"            {\n"
"                result = vec4(1.0);\n"
"            }\n"
"            else\n"
"            {\n"
"                if (type == 3)\n"
"                {\n"
"                    vec4 color_1 = texture(tex_smp, ftcoord);\n"
"                    if (texType == 1)\n"
"                    {\n"
"                        color_1 = vec4(color_1.xyz * color_1.w, color_1.w);\n"
"                    }\n"
"                    if (texType == 2)\n"
"                    {\n"
"                        color_1 = vec4(color_1.x);\n"
"                    }\n"
"                    result = (color_1 * _98) * innerCol;\n"
"                }\n"
"                else\n"
"                {\n"
"                    if (type == 4)\n"
"                    {\n"
"                        vec4 color_2 = texture(tex_smp, ftcoord);\n"
"                        float _308 = dFdx(ftcoord.x);\n"
"                        if (_308 < 0.0)\n"
"                        {\n"
"                            vec4 _313 = color_2;\n"
"                            vec4 _388 = _313;\n"
"                            _388.x = _313.z;\n"
"                            _388.z = _313.x;\n"
"                            color_2 = _388;\n"
"                        }\n"
"                        else\n"
"                        {\n"
"                            if (_308 == 0.0)\n"
"                            {\n"
"                                color_2 = vec4(((color_2.x + color_2.y) + color_2.z) * 0.3333333432674407958984375);\n"
"                            }\n"
"                        }\n"
"                        if (((color_2.w * _98) * innerCol.w) < 0.00390625)\n"
"                        {\n"
"                            discard;\n"
"                        }\n"
"                        result = vec4(color_2.xyz * innerCol.xyz + ((vec3(innerCol.w) - color_2.xyz) * outerCol.xyz), innerCol.w) * _98;\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    outColor = result;\n"
"}\n"
"\n";